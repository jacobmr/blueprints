blueprint:
  name: Dimmer Two-Button Panel
  description: |
    Responds to single press, hold, and release events from an ESP32-based two-button dimmer panel. 
    Implements:
      - Tap up = on / +10%
      - Tap down = off
      - Hold up/down = adjust brightness in 10% steps every 250ms
  domain: automation
  input:
    up_button:
      name: Up Button Sensor
      selector:
        entity:
          domain: binary_sensor
    down_button:
      name: Down Button Sensor
      selector:
        entity:
          domain: binary_sensor
    target_light:
      name: Target Light
      selector:
        entity:
          domain: light

mode: restart
variables:
  light_entity: !input target_light

trigger:
  - platform: event
    event_type: esphome.button_single
    event_data:
      label: !input up_button
  - platform: event
    event_type: esphome.button_single
    event_data:
      label: !input down_button
  - platform: event
    event_type: esphome.button_hold_start
    event_data:
      label: !input up_button
  - platform: event
    event_type: esphome.button_hold_start
    event_data:
      label: !input down_button
  - platform: event
    event_type: esphome.button_release
    event_data:
      label: !input up_button
  - platform: event
    event_type: esphome.button_release
    event_data:
      label: !input down_button

condition: []

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.event_type == 'esphome.button_single' and trigger.event.data.label == up_button }}"
        sequence:
          - service: light.turn_on
            data:
              entity_id: "{{ light_entity }}"
              brightness_step_pct: 10
              transition: 0.2

      - conditions:
          - condition: template
            value_template: "{{ trigger.event.event_type == 'esphome.button_single' and trigger.event.data.label == down_button }}"
        sequence:
          - service: light.turn_off
            data:
              entity_id: "{{ light_entity }}"

      - conditions:
          - condition: template
            value_template: "{{ trigger.event.event_type == 'esphome.button_hold_start' and trigger.event.data.label == up_button }}"
        sequence:
          - service: script.dimming_loop
            data:
              light: "{{ light_entity }}"
              direction: up
              input_button: "{{ up_button }}"

      - conditions:
          - condition: template
            value_template: "{{ trigger.event.event_type == 'esphome.button_hold_start' and trigger.event.data.label == down_button }}"
        sequence:
          - service: script.dimming_loop
            data:
              light: "{{ light_entity }}"
              direction: down
              input_button: "{{ down_button }}"

      # do nothing on release; script stops itself based on release event
    default: []
