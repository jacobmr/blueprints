blueprint:
  name: Dimmer Light via Two Buttons (Hold + Tap)
  description: >
    Use two binary_sensor inputs (up/down) from an ESPHome device to control a dimmable light.
    - If the light is OFF and UP is tapped → Turn ON
    - If the light is ON and UP is tapped → Increase brightness by 10%
    - If the light is ON and UP is held → Increase brightness by 10% every 500ms
    - If the light is ON and DOWN is tapped → Turn OFF
    - If the light is ON and DOWN is held → Decrease brightness by 10% every 500ms
    - If the light is OFF and DOWN is tapped/held → Do nothing
  domain: automation
  source_url: https://raw.githubusercontent.com/jacobmr/blueprints/main/dimmer_two_button.yaml
  input:
    up_button:
      name: Up Button (Binary Sensor)
      selector:
        entity:
          domain: binary_sensor
    down_button:
      name: Down Button (Binary Sensor)
      selector:
        entity:
          domain: binary_sensor
    target_light:
      name: Light to Control
      selector:
        entity:
          domain: light

trigger:
  - platform: state
    entity_id: !input up_button
    to: "on"
    id: up_pressed
  - platform: state
    entity_id: !input down_button
    to: "on"
    id: down_pressed
  - platform: state
    entity_id: !input up_button
    to: "off"
    id: up_released
  - platform: state
    entity_id: !input down_button
    to: "off"
    id: down_released

variables:
  step_size: 10
  step_interval: 500
  min_brightness: 10

mode: parallel

action:
  - choose:
      - conditions:
          - condition: trigger
            id: up_pressed
        sequence:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input target_light
                    state: "off"
                sequence:
                  - service: light.turn_on
                    data:
                      brightness_pct: 100
                      transition: 0.3
                    target:
                      entity_id: !input target_light
              - conditions:
                  - condition: state
                    entity_id: !input target_light
                    state: "on"
                sequence:
                  - service: light.turn_on
                    data:
                      brightness_step_pct: "{{ step_size }}"
                      transition: 0.3
                    target:
                      entity_id: !input target_light
          - repeat:
              while:
                - condition: state
                  entity_id: !input up_button
                  state: "on"
              sequence:
                - service: light.turn_on
                  data:
                    brightness_step_pct: "{{ step_size }}"
                    transition: 0.3
                  target:
                    entity_id: !input target_light
                - delay: "{{ step_interval }}ms"

      - conditions:
          - condition: trigger
            id: down_pressed
        sequence:
          - condition: state
            entity_id: !input target_light
            state: "on"
          - service: light.turn_off
            target:
              entity_id: !input target_light
          - repeat:
              while:
                - condition: state
                  entity_id: !input down_button
                  state: "on"
              sequence:
                - service: light.turn_on
                  data:
                    brightness_step_pct: "{{ -step_size }}"
                    transition: 0.3
                  target:
                    entity_id: !input target_light
                - delay: "{{ step_interval }}ms"

      - conditions:
          - condition: trigger
            id: up_released
        sequence: []

      - conditions:
          - condition: trigger
            id: down_released
        sequence: []
