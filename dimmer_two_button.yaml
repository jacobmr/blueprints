blueprint:
  name: Dimmer Two Button
  description: Control a dimmable light with two binary sensors (up/down buttons).
  domain: automation
  source_url: https://raw.githubusercontent.com/jacobmr/blueprints/main/dimmer_two_button.yaml
  input:
    up_button:
      name: Up Button
      selector:
        entity:
          domain: binary_sensor
    down_button:
      name: Down Button
      selector:
        entity:
          domain: binary_sensor
    target_light:
      name: Target Light
      selector:
        entity:
          domain: light
    brightness_step:
      name: Brightness Step Percentage
      description: How much to change brightness with each step (default 20%)
      default: 20
      selector:
        number:
          min: 5
          max: 50
          step: 5
          unit_of_measurement: "%"
    step_delay:
      name: Step Delay
      description: Delay between brightness steps during hold (default 400ms)
      default: 400
      selector:
        number:
          min: 100
          max: 1000
          step: 50
          unit_of_measurement: "ms"
    tap_threshold:
      name: Tap vs Hold Threshold
      description: How long to wait before considering it a hold (default 400ms)
      default: 400
      selector:
        number:
          min: 200
          max: 800
          step: 50
          unit_of_measurement: "ms"

mode: restart
max_exceeded: silent

variables:
  up_button: !input up_button
  down_button: !input down_button
  target_light: !input target_light
  brightness_step: !input brightness_step
  step_delay: !input step_delay
  tap_threshold: !input tap_threshold

trigger:
  - platform: state
    entity_id: !input up_button
    to: 'on'
    id: up_press
  - platform: state
    entity_id: !input down_button
    to: 'on'
    id: down_press
  - platform: state
    entity_id: !input up_button
    to: 'off'
    id: up_release
  - platform: state
    entity_id: !input down_button
    to: 'off'
    id: down_release

condition: []

action:
  - choose:
      # UP BUTTON PRESSED
      - conditions:
          - condition: trigger
            id: up_press
        sequence:
          - choose:
              # Light is OFF - turn on to 100%
              - conditions:
                  - condition: state
                    entity_id: !input target_light
                    state: 'off'
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input target_light
                    data:
                      brightness_pct: 100
              # Light is ON - wait to detect tap vs hold
              - conditions:
                  - condition: state
                    entity_id: !input target_light
                    state: 'on'
                sequence:
                  - delay:
                      milliseconds: "{{ tap_threshold }}"
                  - if:
                      - condition: state
                        entity_id: !input up_button
                        state: 'on'
                    then:
                      # HOLD detected - continuous dimming up
                      - repeat:
                          while:
                            - condition: state
                              entity_id: !input up_button
                              state: 'on'
                            - condition: template
                              value_template: "{{ (state_attr(target_light, 'brightness') | int(0) / 255 * 100) | round(0) < 100 }}"
                          sequence:
                            - service: light.turn_on
                              target:
                                entity_id: !input target_light
                              data:
                                brightness_pct: >
                                  {% set current = (state_attr(target_light, 'brightness') | int(0) / 255 * 100) | round(0) %}
                                  {% set new_brightness = current + brightness_step %}
                                  {% if new_brightness > 100 %}100{% else %}{{ new_brightness }}{% endif %}
                            - delay:
                                milliseconds: "{{ step_delay }}"
                    else:
                      # TAP detected - single brightness increase
                      - service: light.turn_on
                        target:
                          entity_id: !input target_light
                        data:
                          brightness_pct: >
                            {% set current = (state_attr(target_light, 'brightness') | int(0) / 255 * 100) | round(0) %}
                            {% set new_brightness = current + brightness_step %}
                            {% if new_brightness > 100 %}100{% else %}{{ new_brightness }}{% endif %}

      # DOWN BUTTON PRESSED
      - conditions:
          - condition: trigger
            id: down_press
        sequence:
          - choose:
              # Light is OFF - do nothing
              - conditions:
                  - condition: state
                    entity_id: !input target_light
                    state: 'off'
                sequence: []
              # Light is ON - wait to detect tap vs hold
              - conditions:
                  - condition: state
                    entity_id: !input target_light
                    state: 'on'
                sequence:
                  - delay:
                      milliseconds: "{{ tap_threshold }}"
                  - if:
                      - condition: state
                        entity_id: !input down_button
                        state: 'on'
                    then:
                      # HOLD detected - continuous dimming down to 10%
                      - repeat:
                          while:
                            - condition: state
                              entity_id: !input down_button
                              state: 'on'
                            - condition: template
                              value_template: "{{ (state_attr(target_light, 'brightness') | int(255) / 255 * 100) | round(0) > 10 }}"
                          sequence:
                            - service: light.turn_on
                              target:
                                entity_id: !input target_light
                              data:
                                brightness_pct: >
                                  {% set current = (state_attr(target_light, 'brightness') | int(255) / 255 * 100) | round(0) %}
                                  {% set new_brightness = current - brightness_step %}
                                  {% if new_brightness < 10 %}10{% else %}{{ new_brightness }}{% endif %}
                            - delay:
                                milliseconds: "{{ step_delay }}"
                    else:
                      # TAP detected - turn off
                      - service: light.turn_off
                        target:
                          entity_id: !input target_light

      # UP/DOWN BUTTON RELEASED - stop any ongoing dimming (handled by mode: restart)
      - conditions:
          - condition: trigger
            id: 
              - up_release
              - down_release
        sequence: []
